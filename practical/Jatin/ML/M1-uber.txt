import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("C:/Users/Jatin/Desktop/uber.csv")
df.head()

df.shape

# Remove unwanted columns
df=df.drop(['Unnamed: 0','key'],axis=1)

df.shape

df.dtypes

df.isna().sum()

# Filling missing values
df['dropoff_longitude'].fillna(df['dropoff_longitude'].mean(),inplace=True)
df['dropoff_latitude'].fillna(df['dropoff_latitude'].mean(),inplace=True)

df.isnull().sum()

#Identifying outliers
plt.figure(figsize=(16,16))
sns.boxplot(data=df)

#Correlation
corr=df.corr()
corr

## Split the data
x=df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude']]
y=df['fare_amount']
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

#LinearRegression
from sklearn.linear_model import LinearRegression
regression=LinearRegression()
regression.fit(x_train,y_train)
y_pred=regression.predict(x_test)
result_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(result_df)

from sklearn.metrics import r2_score, mean_squared_error
print("Linear Regression:")
print("R-squared:", r2_score(y_test, y_pred))
MSE = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", MSE)
print("Root Mean Squared Error:", np.sqrt(MSE))

#Random Forest classifier
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(x_train, y_train)
pred = rf.predict(x_test)
result_df = pd.DataFrame({'Actual': y_test, 'Predicted': pred})
print(result_df)

print("\nRandom Forest Regressor:")
print("R-squared:", r2_score(y_test, pred))
mser = mean_squared_error(y_test, pred)
print("Mean Squared Error:", mser)
print("Root Mean Squared Error:", np.sqrt(mser))
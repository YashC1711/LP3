class Node:
    """A Huffman Tree Node"""
    def __init__(self, freq_, symbol_, left_=None, right_=None):
        self.freq = freq_       # frequency of symbol
        self.symbol = symbol_   # symbol name (character)
        self.left = left_       # node left of current node
        self.right = right_     # node right of current node
        self.huff = ""          # tree direction (0/1)

def print_nodes(node, val=""):
    #Utility function to print huffman codes for all symbols in the newly created Huffman tree
    new_val = val + str(node.huff) # huffman code for current node
    if node.left:       # if node is not an edge node then traverse inside it
        print_nodes(node.left, new_val)
    if node.right:
        print_nodes(node.right, new_val)
    if not node.left and not node.right:  # if node is edge node then display its huffman code
        print(f"{node.symbol} ---> {new_val}")

chars = ["a", "b", "c", "d", "e", "f"]   # characters for huffman tree

freq = [50,10,30,5,3,2]    # frequency of characters

nodes = [Node(freq[x], chars[x]) for x in range(len(chars))]  # list containing huffman tree nodes of characters and frequencies

while len(nodes) > 1:
    nodes = sorted(nodes, key=lambda x: x.freq) # sort all the nodes in ascending order based on their frequency
    left = nodes[0]     # pick 2 smallest nodes
    right = nodes[1]
    left.huff = 0       # assign directional value to these nodes
    right.huff = 1
    # combine the 2 smallest nodes to create new node as their parent
    newNode = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
    # remove the 2 nodes and add their parent as new node among others
    nodes.remove  (left)
    nodes.remove(right)
    nodes.append(newNode)
   
print("Characters :", f'[{", ".join(chars)}]')
print("Frequency :", freq, "\n\nHuffman Encoding:")
print_nodes(nodes[0])